((("vertex-set" .
   [1 0 0 0 0 0 0 0 0 0])
  ("new-roots-sprout-diff!" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("sprout" .
   [0 0 0 0 0 1])
  ("Sprout" .
   [1 0 0 0 0 0])
  ("s" .
   [1])
  ("has-diff-edge?" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("splice!" .
   [1 0 0 0 0 0 0])
  ("is-root?" .
   [0 0 0 1 0 0 0 1])
  ("an" .
   [2 0])
  ("out" .
   [1 0 0])
  (":edge" .
   [1 0 0 0 0])
  ("props" .
   [1 0 0 0 0])
  ("new-vtx" .
   [0 0 0 0 0 1 1])
  ("merge!" .
   [3 0 0 0 0 0])
  ("props2" .
   [1 0 0 0 0 0])
  ("props1" .
   [2 0 0 0 0 0])
  ("lbl2" .
   [1 0 0 0])
  ("lbl1" .
   [2 0 0 0])
  ("vtx2" .
   [4 0 0 0])
  ("vtx1" .
   [5 0 0 0])
  (".addEdge" .
   [0 0 0 0 1 0 0 0])
  ("v" .
   [1])
  ("sprout!" .
   [2 0 0 0 0 0 0])
  ("map" .
   [0 0 1])
  ("split-lost!" .
   [0 0 0 0 0 0 0 0 1 0 1])
  ("vertex" .
   [3 0 0 0 0 0])
  ("find-top" .
   [4 0 0 0 0 0 2 0])
  (".." .
   [1 0])
  ("merge-found!" .
   [0 0 0 0 0 0 0 0 0 1 0 0])
  ("split!" .
   [1 0 0 0 0 0])
  ("inV" .
   [2 0 0])
  ("edg" .
   [2 0 0])
  ("inactive-root-edges" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("doseq" .
   [0 0 0 1 0])
  ("top-path" .
   [1 0 0 0 0 0 0 0])
  ("path-action!" .
   [0 0 0 0 0 0 1 1 0 0 0 0])
  ("top-pipe" .
   [0 0 0 0 2 0 0 0])
  ("path" .
   [1 0 0 0])
  ("prop" .
   [4 0 0 0])
  ("lbl" .
   [6 0 0])
  ("Edge" .
   [1 0 0 1])
  ("path-sequence" .
   [0 0 0 0 0 0 2 0 0 0 0 0 0])
  ("new-edge" .
   [0 0 0 0 0 1 0 0])
  ("edge-function" .
   [0 0 0 0 0 0 1 1 0 0 0 0 0])
  ("function" .
   [0 0 0 1 0 0 0 0])
  ("splice" .
   [1 0 0 0 0 0])
  ("->" .
   [10 0])
  ("root" .
   [2 0 0 0])
  ("swap!" .
   [0 0 0 0 1])
  ("leaf-action!" .
   [0 0 0 0 0 2 0 0 0 0 0 0])
  ("org.clojure/clojure" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  (":edge-action" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("neighbours-without-root" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("Neighbours" .
   [0 0 0 0 0 0 0 0 0 1])
  (":permitted-neighbours" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  (":end-vertex" .
   [0 0 0 0 0 0 0 0 0 0 1])
  (":start-vertex" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0])
  (":graph" .
   [1 0 0 0 0 0])
  ("This" .
   [1 0 0 0])
  ("filtered-vertex-set" .
   [0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0])
  ("Vertex" .
   [0 0 0 0 0 1])
  ("steal-subtree!" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("lift-xor-merge!" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("shallow-neighbour-adopt" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("shallow-neighbour" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("child" .
   [1 0 0 0 0])
  ("deep-root-pipe" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("root-pipe" .
   [0 0 0 0 0 0 0 0 2])
  ("outE" .
   [4 0 0 0])
  (".getObject" .
   [0 0 0 0 0 0 1 0 0 0])
  ("root-candidates" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0])
  ("has-not" .
   [3 0 0 0 0 0 1])
  ("breadth-first" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("inactive" .
   [0 0 0 0 0 0 0 1])
  ("root-nbhd-pipe" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("Graph" .
   [0 0 0 0 1])
  ("end" .
   [1 0 0])
  ("root-path-length" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1])
  ("report-merge" .
   [0 0 0 0 0 0 0 0 0 0 1 1])
  ("find-deep-root" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 2])
  ("doc" .
   [0 0 3])
  ("status" .
   [0 0 0 0 1 0])
  ("if" .
   [9 0])
  ("nil" .
   [9 0 0])
  ("end-vertex" .
   [0 0 0 6 2 0 2 0 1 3])
  ("start-vertex" .
   [0 0 0 4 1 0 0 0 2 1 0 5])
  ("graph" .
   [9 0 0 1 1])
  (":keys" .
   [3 0 0 0 0])
  ("reassign-parent!" .
   [0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 2])
  ("outV" .
   [2 0 0 0])
  ("inE" .
   [2 0 0])
  ("i" .
   [1])
  ("adj-criteria" .
   [1 0 0 0 0 0 2 0 0 0 0 0])
  ("except" .
   [1 0 0 0 2 1])
  ("root-nbhd" .
   [0 0 0 0 0 0 3 0 1])
  ("adj-criteria-new" .
   [0 0 0 0 2 0 0 0 0 0 0 0 1 0 2 4])
  ("back" .
   [6 0 0 0])
  ("aggregate" .
   [0 0 0 0 0 1 0 0 0])
  ("adj-criteria-old" .
   [0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 1])
  ("a" .
   [2])
  ("dcc-edge-action-map" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("find-descendants" .
   [0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0])
  ("find-root" .
   [0 0 0 0 0 0 3 2 5])
  ("graph-name" .
   [4 0 0 0 0 0 1 1 0 0])
  ("no" .
   [11 0])
  ("clojure.set/union" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("dcc-step" .
   [0 0 0 2 0 0 0 0])
  ("g-old" .
   [5 0 0 1 0])
  ("g-new" .
   [5 0 0 1 0])
  ("graph-list" .
   [1 0 0 0 0 0 0 0 0 0])
  ("graph-seq" .
   [1 0 0 0 0 0 0 0 0])
  ("p" .
   [1])
  ("c" .
   [2])
  ("has" .
   [6 0 0])
  (".setProperty" .
   [0 0 0 0 3 0 0 0 0 0 0 0])
  ("neighbour-pipeline" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("permitted-neighbour-pipeline" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("add-root-edge" .
   [0 0 0 0 1 1 1 0 0 0 0 0 0])
  ("false" .
   [2 0 0 1 0])
  (":empty?" .
   [1 0 0 1 2 1 0])
  ("true" .
   [3 0 0 1])
  ("colour" .
   [1 0 0 0 2 0])
  ("retain" .
   [4 0 0 0 0 1])
  ("clojure-pipeline" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("nbhd" .
   [2 0 3 0])
  ("q-snapshot" .
   [0 0 0 0 0 0 1 0 0 0])
  ("nxt" .
   [1 0 0])
  ("sprout-root-diff!" .
   [0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0])
  ("vtx" .
   [43 0 7])
  ("def" .
   [12 0 0])
  ("DirectedAcyclicGraph" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("org.jordanlewis/data.union-find" .
   [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])))
